}
# Create the vector with characters.
charv <- c("a","b","c","t","a","c","r","a","c","t","z","r","v","t","u","e","t")
# Calculate the mode using the user function.
result <- getmode(charv)
print(result)
# The datasets package needs to be loaded to access our data
# For a full list of these datasets, type library(help = "datasets")
library(datasets)
data(iris)
summary(iris)
names(iris) <- tolower(names(iris))
library(dplyr)
##
## Attaching package: 'dplyr'
names(iris) <- tolower(names(iris))
library(dplyr)
names(iris) <- tolower(names(iris))
library(dplyr)
## Attaching package: 'dplyr'
## The following objects are masked from 'package:stats':
##
##     filter, lag
## The following objects are masked from 'package:base':
##
##     intersect, setdiff, setequal, union
# filter() the data for species setosa
setosa <- filter(iris, species == "setosa")
head(setosa) # This dispalys the first six rows
## The following objects are masked from 'package:stats':
##
##     filter, lag
# filter() the data for species setosa
virginica <- filter(iris, species == "setosa")
head(setosa) # This dispalys the first six rows
sepalLength6 <- filter(iris, species == "setosa", sepal.length > 6)
tail(sepalLength6) # compare this to head()
# The datasets package needs to be loaded to access our data
# For a full list of these datasets, type library(help = "datasets")
library(datasets)
data(iris)
summary(iris)
install.packages("dplyr")
## Attaching package: 'dplyr'
## The following objects are masked from 'package:stats':
##
##     filter, lag
## The following objects are masked from 'package:base':
##
##     intersect, setdiff, setequal, union
# filter() the data for species setosa
setosa <- filter(iris, species == "setosa")
head(setosa) # This dispalys the first six rows
# filter() the data for Species Setosa
Setosa <- filter(iris, Species == "Setosa")
head(Setosa) # This dispalys the first six rows
View(iris)
# filter() the data for species Setosa
Setosa <- filter(iris, species == "Setosa")
head(Setosa) # This dispalys the first six rows
# filter() the data for species Setosa
Setosa <- filter(iris, species == "Setosa")
head(Setosa) # This dispalys the first six rows
# filter() the data for species virginica
virginica <- filter(iris, species == "virginica")
head(virginica) # This dispalys the first six rows
install.packages("dplyr")
names(iris) <- tolower(names(iris))
library(dplyr)
## Attaching package: 'dplyr'
## The following objects are masked from 'package:stats':
##
##     filter, lag
## The following objects are masked from 'package:base':
##
##     intersect, setdiff, setequal, union
# filter() the data for species virginica
virginica <- filter(iris, species == "virginica")
head(virginica) # This dispalys the first six rows
# filter() the data for species setosa
setosa <- filter(iris, species == "setosa")
head(setosa) # This dispalys the first six rows
install.packages(dplyr)
install.packages("dplyr")
install.packages("dplyr")
library(datasets)
data(iris)
summary(iris)
names(iris) <- tolower(names(iris))
library(dplyr)
##
## Attaching package: 'dplyr'
## The following objects are masked from 'package:stats':
##
##     filter, lag
## The following objects are masked from 'package:base':
##
##     intersect, setdiff, setequal, union
# filter() the data for species virginica
setosa <- filter(iris, species == "setosa")
head(setosa) # This dispalys the first six rows
#calculate the mean of each row
#and add an extra column called Means_of_obs
iris_subset$Means_of_obs <- apply(iris_subset, 1, mean)
head(iris_subset)
#calculate the mean of each row
#and add an extra column called Means_of_obs
> iris$Means_of_obs <- apply(iris, 1, mean)
#calculate the mean of each row
#and add an extra column called Means_of_obs
> iris$Means_of_obs <- apply(iris, 1, mean)
#calculate the mean of each row
#and add an extra column called Means_of_obs iris$Means_of_obs <- apply(iris, 1, mean)
#calculate the mean of each row
#and add an extra column called Means_of_obs iris$Means_of_obs <- apply(iris, 1, mean)
#calculate the mean of each row
#and add an extra column called Means_of_obs iris$Means_of_obs <- apply(iris, 1, mean)
summary(iris)
#calculate the mean of each row
#and add an extra column called Means_of_obs iris$Means_of_obs <- apply(iris, 1, mean)
>  #calculate the mean of each row
> #and add an extra column called Means_of_obs iris$Means_of_obs <-
> # The datasets package needs to be loaded to access our data
# For a full list of these datasets, type library(help = "datasets")
library(datasets)
data(iris)
summary(iris)
names(iris) <- tolower(names(iris))
library(dplyr)
##
## Attaching package: 'dplyr'
## The following objects are masked from 'package:stats':
##
##     filter, lag
## The following objects are masked from 'package:base':
##
##     intersect, setdiff, setequal, union
#calculate the mean of each row #and add an extra column called Means_of_obs iris$Means_of_obs <- apply(iris, 1, mean)
View(New_col_DF)
View(New_row_DF)
View(setosa)
View(virginica)
View(Data_Frame)
View(getmode)
#calculate the mean of each row #and add an extra column called Means_of_obs iris$Means_of_obs <- apply(iris, 1, mean) head(iris)
dim(iris)
#calculate the mean of each row #and add an extra column called Means_of_obs iris$Means_of_obs <- apply(iris, 1, mean) head(iris)
#remove column 5
iris_subset <- iris[,-5]
#one less column
dim(iris_subset)
#now let's perform some simple statistics
#calculate the mean of each row
#and add an extra column called mean
iris_subset$mean <- apply(iris_subset, 1, mean)
head(iris_subset)
#remove column 5
iris_subset <- iris[,-5]
#one less column
dim(iris_subset)
#[1] 150   4
#now let's perform some simple statistics
#calculate the mean of each row
#and add an extra column called mean_of_obs
iris_subset$mean_of_obs <- apply(iris_subset, 1, mean_of_obs)
head(iris_subset)
#remove column 5
iris_subset <- iris[,-5]
#one less column
dim(iris_subset)
#[1] 150   4
#now let's perform some simple statistics
#calculate the mean of each row
#and add an extra column called mean
iris_subset$mean <- apply(iris_subset, 1, mean_of_obs)
head(iris_subset)
#remove column 5
iris_subset <- iris[,-5]
#one less column
dim(iris_subset)
#now let's perform some simple statistics
#calculate the mean of each row
#and add an extra column called mean
iris_subset$mean_of_obs <- apply(iris_subset, 1, mean)
head(iris_subset)
View(setosa)
View(New_row_DF)
View(setosa)
View(virginica)
View(iris_subset)
View(New_col_DF)
View(iris_subset)
View(iris)
library(dplyr)
filter(iris,Species=="versicolor")
#library(dplyr)
filter(iris,Species=="virginica")
rm(list = ls(all = TRUE))
# install.packages('dplyr', dependencies = TRUE) # install it if you don't have
library(dplyr, quietly = TRUE)
##
## Attaching package: 'dplyr'
## The following objects are masked from 'package:stats':
##
##     filter, lag
## The following objects are masked from 'package:base':
##
##     intersect, setdiff, setequal, union
data(iris) # load the iris data
iris2 <- tbl_df(iris)
print(iris2)
View(iris2)
iris2 <- tbl_df(iris)
filter(iris2, Species == 'versicolor') # Species == 'versicolor' is the criteria
select(iris2, Petal.Length, Sepal.Width)
# Load the ggplot2 package
library(ggplot2)
# Create the basic plot (not displayed): basePlot
basePlot <- ggplot(mtcars, aes(x = Horsepower, y = MPG.city))
# Display the basic scatterplot
basePlot +
geom_point()
# Load the ggplot2 package
library(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
# Load the ggplot2 package
library(ggplot2)
# Create the basic plot (not displayed): basePlot
basePlot <- ggplot(mtcars, aes(x = Horsepower, y = MPG.city))
# Display the basic scatterplot
basePlot +
geom_point()
# Load the ggplot2 package
library(ggplot2)
# Create the basic plot (not displayed): basePlot
basePlot <- ggplot(mtcars, aes(x = Carb, y = cyl))
# Display the basic scatterplot
basePlot +
geom_point()
# Load the ggplot2 package
library(ggplot2)
# Create the basic plot (not displayed): basePlot
basePlot <- ggplot(mtcars, aes(x = Carb, y = cyl))
# Display the basic scatterplot
basePlot +
geom_point()
# Load the ggplot2 package
library(ggplot2)
# Create the basic plot (not displayed): basePlot
basePlot <- ggplot(mtcars, aes(x = Carbs, y = cyl))
# Display the basic scatterplot
basePlot +
geom_point()
library(ggplot2)
str(mtcars)
library(ggplot2)
ggplot(mtcars, aes(x = cyl, y = mpg)) +
geom_point()
library(ggplot2)
ggplot(mtcars, aes(x = wt, y = mpg, color = disp)) +
geom_point()
# Color the points by Cylinders value
basePlot +
geom_point(colour = IScolors[Cars93$Cylinders])
library(ggplot2)
ggplot(mtcars, aes(x = wt, y = mpg, color = disp)) +
geom_point()
# Load the data
data(mtcars)
df <- mtcars[, c("mpg", "cyl", "wt")]
head(df)
> library(ggplot2)
> str(mtcars)
library(ggplot2)
> ggplot(mtcars, aes(x = cyl, y = mpg)) +
+     geom_point()
> library(ggplot2)
> ggplot(mtcars, aes(x = wt, y = mpg, color = disp)) +
+    geom_jitter(), stat_summary()
# Load the data
data(mtcars)
df <- mtcars[, c("mpg", "cyl", "wt")]
head(df)
stat_qq()
geom_text(), annotate(), annotation_custom()
annotate(), annotation_custom()
annotation_custom()
scale_shape_manual(), scale_color_manual(), scale_size_manual()
scale_shape_manual()
scale_color_manual()
scale_size_manual()
stat_qq()
# Load the data
data(mtcars)
df <- mtcars[, c("mpg", "cyl", "wt")]
head(df)
stat_qq()
> library(ggplot2)
> str(mtcars)
library(ggplot2)
str(mtcars)
library(ggplot2)
ggplot(mtcars, aes(x = cyl, y = mpg)) +
geom_point()
library(ggplot2)ggplot(mtcars, aes(x = wt, y = mpg, color = disp)) +
stat_qq()
> library(ggplot2)
> str(mtcars)
install.packages("ggplot2")
install.packages("ggplot2")
> library(ggplot2)
> str(mtcars)
library(ggplot2)
str(mtcars)
library(ggplot2)
ggplot(mtcars, aes(x = cyl, y = mpg)) +
+     geom_point()
library(ggplot2)
ggplot(mtcars, aes(x = wt, y = mpg, color = disp)) +
+     geom_point()
library(ggplot2)
ggplot(mtcars, aes(x = cyl, y = mpg)) +
geom_point()
library(ggplot2)
ggplot(mtcars, aes(x = wt, y = mpg, color = disp)) +
geom_point()
load("~/.RData")
Data_Frame <- data.frame (
Training = c("Strength", "Stamina", "Other","Power","Degree"),
Pulse = c(100, 150, 120, 100, 150),
Duration = c(60, 30, 45, 50, 55)
)
Data_Frame
summary(Data_Frame)
Data_Frame <- data.frame (
Training = c("Strength", "Stamina", "Other","Power","Degree"),
Pulse = c(100, 150, 120, 100, 150),
Duration = c(60, 30, 45, 50, 55)
)
Data_Frame <- data.frame (
Training = c("Strength", "Stamina", "Other","Power","Degree"),
Pulse = c(100, 150, 120, 100, 150),
Duration = c(60, 30, 45, 50, 55)
)#
Data_Frame <- data.frame (
Training = c("Strength", "Stamina", "Other","Power","Degree"),
Pulse = c(100, 150, 120, 100, 150),
Duration = c(60, 30, 45, 50, 55)
)
# Remove the first row and column
Data_Frame_New <- Data_Frame[-c(1), -c(1)]
# Print the new data frame
Data_Frame_New
seq(1,50, by=3)
seq(1,50, by=5)
seq(1,50, by=10)
View(iris)
View(iris)
seq(1,50, by=3)
seq(1,50, by=5)
seq(1,50, by=10)
Data_Frame <- data.frame (
Training = c("Strength", "Stamina", "Other","Power","Degree"),
Pulse = c(100, 150, 120, 100, 150),
Duration = c(60, 30, 45, 50, 55)
)
Data_Frame
# Remove the first row and column
Data_Frame_New <- Data_Frame[-c(1), -c(1)]
View(Data_Frame_New)
# Print the new data frame
Data_Frame_New
# Add a new column
New_col_DF <- cbind(Data_Frame, Steps = c(1000, 6000, 2000, 5000, 7000))
# Print the new column
New_col_DF
# Add a new row
New_row_DF <- rbind(Data_Frame, c("Strength", 110, 110))
# Print the new row
New_row_D
# Add a new row
New_row_DF <- rbind(Data_Frame, c("Strength", 110, 110))
View(New_row_DF)
x <-0
if (x < 0) {
print("Negative number")
} else if (x > 0) {
print("Positive number")
} else
print("Zero")
x <-5
is.numeric(x)
x 1 ← c( “akshada”,100)#
is.character(x1)
x1 ← c( “akshada”,100)#
is.character(x1)
x1 <- c( “akshada”,100)#
is.character(x1)
x1 <-c( “akshada”,100)#
is.character(x1)
m <-c( “akshada”,100)#
is.character(m)
m <- c( “akshada”,100)#
is.character(m)
m <-c( “akshada”,100)#
is.character(m)
y <- c("akshada",100) #
is.character(y)
m ← “/” #
grepl('[^[:alnum:]]', m)
m <- "/"#
grepl('[^[:alnum:]]',m)
no <- 1:10
for (val in no)
{
if (val == 5)
{
print(paste("Coming out from for loop Where i = ", val))
break
}
print(paste("Values are: ", val))
}
x= c(1,5.6,3,10,3.5,5)
print(x)
rx = rev(x)
print(rx)
> # Create the function.
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
# Create the vector with characters.
charv <- c("a","b","c","t","a","c","r","a","c","t","z","r","v","t","u","e","t")
# Calculate the mode using the user function.
result <- getmode(charv)
print(result)
install.packages("dplyr")
install.packages("dplyr")
# The datasets package needs to be loaded to access our data
# For a full list of these datasets, type library(help = "datasets")
library(datasets)
data(iris)
summary(iris)
names(iris) <- tolower(names(iris))
library(dplyr)
##
## Attaching package: 'dplyr'
## The following objects are masked from 'package:stats':
##
##     filter, lag
## The following objects are masked from 'package:base':
##
##     intersect, setdiff, setequal, union
# filter() the data for species virginica
setosa <- filter(iris, species == "setosa")
head(setosa) # This dispalys the first six rows
#remove column 5
iris_subset <- iris[,-5]
#one less column
dim(iris_subset)
#[1] 150   4
#now let's perform some simple statistics
#calculate the mean of each row
#and add an extra column called mean
iris_subset$mean_of_obs <- apply(iris_subset, 1, mean)
head(iris_subset)
rm(list = ls(all = TRUE))
# install.packages('dplyr', dependencies = TRUE) # install it if you don't have
library(dplyr, quietly = TRUE)
##
## Attaching package: 'dplyr'
## The following objects are masked from 'package:stats':
##
##     filter, lag
## The following objects are masked from 'package:base':
##
##     intersect, setdiff, setequal, union
data(iris) # load the iris data
iris2 <- tbl_df(iris)
print(iris2)
iris2 <- tbl_df(iris)
filter(iris2, Species == 'versicolor') # Species == 'versicolor' is the criteria
select(iris2, Petal.Length, Sepal.Width)
> library(ggplot2)
> str(mtcars)
library(ggplot2)
str(mtcars)
library(ggplot2)
ggplot(mtcars, aes(x = cyl, y = mpg))
+    geom_point()
library(ggplot2)
ggplot(mtcars, aes(x = wt, y = mpg, color = disp))
geom_point()
> library(ggplot2)
> ggplot(mtcars, aes(x = cyl, y = mpg)) +
geom_point()
> library(ggplot2)
> ggplot(mtcars, aes(x = wt, y = mpg, color = disp))
geom_point()
library(ggplot2)
ggplot(mtcars, aes(x = cyl, y = mpg)) +
geom_point()
library(ggplot2)
ggplot(mtcars, aes(x = wt, y = mpg, color = disp))
geom_point()
library(ggplot2)
ggplot(mtcars, aes(x = wt, y = mpg, color = disp)) +
geom_point()
load("~/.RData")
View(basePlot)
View(basePlot)
